Replace the current “Click Select lenses” functionality with a new multi-step lens customization wizard for an eyewear e-commerce site. Completely remove all files and code related to the legacy implementation.

Core Requirements:

Wizard Component: Create a stateful, multi-step wizard with a dynamic progress indicator.

Responsive & Accessible: Ensure the wizard is mobile-friendly and follows accessibility guidelines.

Conditional Flow: The wizard must handle three different user flows based on the vision type selected in Step 1.

Clickable Navigation: For all steps where choices lead to different pages, options should be displayed as clickable elements.
Exception: On the Prescription Form page, instead of clickable choices, provide a “Continue” button to move to the next page.

User Flows & Steps:

Step 1: Vision Type Selector

Present three clickable options:

Single Vision (prescription needed)

Non-Prescription

Frame Only

The selected option determines the following steps.

Flow A – Single Vision:

Prescription Form:

Provide inputs for Right/Left Eye: Sphere, Cylinder, and Axis

Provide an input for Pupillary Distance

Include an option to “Use Saved Prescription”

Instead of clickable options, include a “Continue” button to proceed.

Lens Type Selector:

Display clickable options:

Clear lenses ($0 additional)

Blue light filtering lenses (+$50)

Transition lenses (+$100)

Lens Thickness Options:

Display clickable options:

Standard ($0 additional)

Thin (+$30)

Ultra-thin (+$60)

Order Review:

Show frame details, list selected options, and calculate the total price.

Flow B – Non-Prescription:

Skip the Prescription Form.

Proceed with the Lens Type, Lens Thickness, and Order Review pages as in Flow A.

Flow C – Frame Only:

Skip directly to the Order Review page.

Additional Instructions:

Remove all legacy files and code associated with the old lens selection functionality.

Validate all user data, implement proper error handling, and support backward navigation for corrections.

Include inline comments in the code and provide basic testing suggestions or unit test stubs.

Use your preferred framework (e.g., React, Vue, Angular) and clearly document the integration process.